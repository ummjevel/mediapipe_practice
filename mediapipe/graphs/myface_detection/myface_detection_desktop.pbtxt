# MediaPipe graph that performs face mesh with TensorFlow Lite on CPU.

# CPU buffer. (ImageFrame)
input_stream: "input_image"

# Output image with rendered results. (ImageFrame)
# output_stream: "output_image"
# Detected faces. (std::vector<Detection>)
output_stream: "face_detections"

output_stream: "face_recognitions"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_image"
  input_stream: "FINISHED:output_image"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_image"
  options: {
    [mediapipe.FlowLimiterCalculatorOptions.ext] {
      max_in_flight: 1
      max_in_queue: 1
    }
  }
}

# Subgraph that detects faces.
node {
  calculator: "FaceDetectionShortRangeCpu"
  input_stream: "IMAGE:throttled_input_image"
  output_stream: "DETECTIONS:face_detections"
}

# bbox를 받아서 이미지를 crop --> align 해서 112x112 크기로 arcface에 넣어줘야함

# Subgraph that detects faces.
node {
  calculator: "FaceRecognitionShortRangeCpu"
  input_stream: "IMAGE:throttled_input_image"
  output_stream: "RECOGNITIONS:face_recognitions"
}
